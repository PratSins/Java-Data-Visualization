import Assets_Indicators.*;
import Database_Functions.*;
import Development_Indicators.*;

import java.sql.Connection;
import java.util.ArrayList;
import java.util.Scanner;

import static java.lang.System.*;


public class Economy_Data_Visualization {
        static SQL_Acc acc=new SQL_Acc();
        static Scanner sc=new Scanner(in);
        static public ArrayList<String> Country_Codes=new ArrayList<>();
        public static void print_Indicators(){
            out.println("1-> Gross Domestic Product(i.e. The total monetary value generated by a country in a year)");
            out.println("2-> Population");
            out.println("3-> Total Reserves(Monetary Gold and IMF reserves of the Country)");
            out.println("4-> Consumer Price Index(i.e. A measure of change of prices in past years)");
            out.println("5-> Deposit Interest Rate(i.e. Rate paid by banks to their customers)");
            out.println("6-> Exchange Rate(i.e. Strength of Currency of a nation against US Dollar)");
            out.println("7-> Export Percentage of GDP(i.e. How much percentage of GDP is spent on Exporting Goods)");
            out.println("8-> Import Percentage of GDP(i.e. How much percentage of GDP is spent on Importing Goods)");
            out.println("9-> Tax Revenue Percentage(Funds collected from Imports)");
        }
        static void print_Menu(){
            out.println("\n\nMenu:--->");
            out.println("1-> Plot Specific Country Data");
            out.println("2-> Compare Countries");
            out.println("3-> Update Country Data");
            out.println("4-> Delete Country Data");
            out.println("5-> Get Country Data by Country Name");
            out.println("6-> Get Inflation data about Country");
            out.println("0-> Exit");
        }
     static void print_Menu1(){
        out.println("\n\nMenu_1:--->");
        out.println("You want to Plot:::");
        Economy_Data_Visualization.print_Indicators();
    }
    static void print_Menu2(){
        out.println("\n\nMenu_2:--->");
        out.println("On the Basis of:::");
        Economy_Data_Visualization.print_Indicators();
    }
    static void print_Menu3(){
        out.println("\n\nMenu_3:--->");
        out.println("You want to change:::");
        Economy_Data_Visualization.print_Indicators();
    }
    static void print_Menu4(){
        out.println("\n\nMenu_4:--->");
        out.println("You want to Delete:::");
        out.println("1-> Gross Domestic Product(i.e. The total monetary value generated by a country in a year)");
        out.println("2-> Population");
        out.println("3-> Total Reserves(Monetary Gold and IMF reserves of the Country)");
        out.println("4-> Consumer Price Index(i.e. A measure of change of prices in past years)");
        out.println("5-> Deposit Interest Rate(i.e. Rate paid by banks to their customers)");
        out.println("6-> Exchange Rate(i.e. Strength of Currency of a nation against US Dollar)");
    }
    public static ArrayList<country> Initialize_Countries(){
        ArrayList<country> Countries=new ArrayList<>();
        Object[] Countries_Names= SQLDataExtractor.getCountryInfo();
        String tempStr,C_Code,C_Name;
        Country_Codes.clear();
        country tempC;
        for(Object i:Countries_Names){
            tempStr=i.toString();
            C_Code=tempStr.substring(0,3);
            Country_Codes.add(C_Code);
            C_Name=tempStr.substring(6);
            tempC=new country(C_Code,C_Name);
            Countries.add(tempC);
        }
        return Countries;
    }
    public static void main(String[] args)
    {
        out.println("<----Hello, Welcome to the Economy Data Visualization Software----->");
        int input=1;
        out.print("Please Enter your Database Password:");
        SQL_Acc.pwd= sc.nextLine();
        Connection con = ConnectionProvider.getConnection(acc.url, acc.username, acc.pwd);
        while (con==null){
            out.print("Wrong Password!!\n Please enter the correct database password");
            SQL_Acc.pwd= sc.nextLine();
            con = ConnectionProvider.getConnection(acc.url, acc.username, acc.pwd);
        }
        if(!SQLDataRegistrar.doesDBexists(acc.dbName)){
            out.println("Database does not exist,\n Don't Worry, We will create one right now!");
            SQLDataRegistrar.main(new String[]{""});
        }
        else{
            out.println("Database Exists!!!,\n1->Do you want to update it on the basis of CSV files\n2->Or you want to use the old database. ");
            input=take_input();
            while (input!=1 && input!=2){
                out.println("Wrong Input!! Try again");
                input=take_input();
            }
            if(input==1){
                DeleteJDBC.delDB();
                SQLDataRegistrar.main(new String[]{""});
            }
        }
        //Initializing Countries Array
        ArrayList<country> Countries=Initialize_Countries();

        while (input!=0){
            print_Menu();
            input=take_input();
            while(input>6 || input<0){
                out.println("Wrong Input!!!! Try Again");
                input=take_input();
            }
            switch (input){
                case 1:
                    Country_Plot(Countries);
                    continue;
                case 2:
                    ComparePlot(Countries);
                    continue;
                case 3:
                    Countries=Update_Data(Countries);
                    continue;
                case 4:
                    Countries=Delete_Country(Countries);
                    continue;
                case 5:
                    searchCountry(Countries);
                    continue;
                case 6:
                    Inflation(Countries);
                default:
            }
        }
        out.print("\n\n Thanks for using our Visualization Software :)");
        System.exit(0);
    }

    private static ArrayList<country> Delete_Country(ArrayList<country> countries) {
        String Country_Code;
        out.print("Enter the Country Code:");
        Country_Code=sc.nextLine();
        while (!check_country_code(Country_Code)){
            out.println("Wrong!! Country Code");
            out.print("Enter the Country Code:");
            Country_Code=sc.nextLine();
        }
        print_Menu4();
        int input=take_input();
        while(input>6 || input<0){
            out.println("Wrong Input!!!! Try Again");
            input=take_input();
        }
        switch (input) {
            case 1 -> countries = HandleUpdate.handle_Delete(countries, "GDP", Country_Code);
            case 2 -> countries = HandleUpdate.handle_Delete(countries, "Population", Country_Code);
            case 3 -> countries = HandleUpdate.handle_Delete(countries, "Reserves", Country_Code);
            case 4 -> countries = HandleUpdate.handle_Delete(countries, "consumer_price_index", Country_Code);
            case 5 -> countries = HandleUpdate.handle_Delete(countries, "deposit_interest_rate", Country_Code);
            case 6 -> countries = HandleUpdate.handle_Delete(countries, "exchange_rate", Country_Code);
        }
        return countries;
    }

    static boolean check_country_code(String country_code) {
            country_code=country_code.toUpperCase();
            for(String i:Country_Codes){
                if(i.equals(country_code)){
                    return true;
                }
            }
            return false;
    }

    private static void Inflation(ArrayList<country> countries) {
        out.print("Enter the Country Code:");
        String country_code=sc.nextLine();
        while (!check_country_code(country_code)){
            out.println("Wrong!! Country Code");
            out.print("Enter the Country Code:");
            country_code=sc.nextLine();
        }
        out.print("Enter the Range of Years(year>1960 && year<2022):\nLower Value:");
        if(!sc.hasNextInt()){
            sc.nextLine();
            out.println("Enter only Integer!!!!");
            out.println("Enter the Lower value");
        }
        int lower= sc.nextInt();sc.nextLine();
        while(lower<1960 && lower>2020){
            out.println("Enter Only in range");
            lower= sc.nextInt();sc.nextLine();
        }
        out.print("Upper Value:");
        if(!sc.hasNextInt()){
            sc.nextLine();
            out.println("Enter only Integer!!!!");
            out.println("Enter Upper Value");
        }
        int upper= sc.nextInt();sc.nextLine();
        while(upper<1960 && upper>2020){
            out.println("Enter Only in range");
            upper=sc.nextInt();sc.nextLine();
        }
        for(country i:countries){
            if(i.code.equals(country_code)){
                out.println("Inflation between these years:"+i.inflation_Difference(upper,lower));
            }
        }
    }

    private static void searchCountry(ArrayList<country> countries) {
        String Country_Name;
        out.print("Enter the Country Name:");
        Country_Name=sc.nextLine();

        out.println("Similar records:");
        for(country i:countries){
            if(i.name.toLowerCase().contains(Country_Name.toLowerCase())){
                out.println("Name:"+i.name);
                out.println("Code:"+i.code);
                out.println("Inflation:"+i.inflation_Difference(2021));
                out.println("\n\n");
            }
        }
    }

    private static ArrayList<country> Update_Data(ArrayList<country> countries ) {
        print_Menu3();
        int input=take_input();
        while(input>9 || input<0){
            out.println("Wrong Input!!!! Try Again");
            input=take_input();
        }
        switch (input) {
            case 1 -> countries = HandleUpdate.handle_Asset_Update(countries, "GDP");
            case 2 -> countries = HandleUpdate.handle_Asset_Update(countries, "Population");
            case 3 -> countries = HandleUpdate.handle_Asset_Update(countries, "Reserves");
            case 4 -> countries = HandleUpdate.handle_Development_Update(countries, "consumer_price_index");
            case 5 -> countries = HandleUpdate.handle_Development_Update(countries, "deposit_interest_rate");
            case 6 -> countries = HandleUpdate.handle_Development_Update(countries, "exchange_rate");
            case 7 -> countries = HandleUpdate.handle_GDP_Update(countries, "export_per");
            case 8 -> countries = HandleUpdate.handle_GDP_Update(countries, "import_per");
            case 9 -> countries = HandleUpdate.handle_GDP_Update(countries, "tax");
        }
        return countries;
    }



    private static void ComparePlot(ArrayList<country> countries) {
        print_Menu2();
        int input=take_input();
        while(input>9 || input<0){
            out.println("Wrong Input!!!! Try Again");
            input=take_input();
        }
        switch (input) {
            case 1 -> Plot_Chart.compare_Bar(countries, new GDP());
            case 2 -> Plot_Chart.compare_Bar(countries, new Population());
            case 3 -> Plot_Chart.compare_Bar(countries, new Reserves());
            case 4 -> Plot_Chart.compare_line(countries, new CPI());
            case 5 -> Plot_Chart.compare_line(countries, new Deposit_Interest_Rate());
            case 6 -> Plot_Chart.compare_line(countries, new Exchange_Rate());
            case 7 -> Plot_Chart.compare_line_gdp(countries, "Export");
            case 8 -> Plot_Chart.compare_line_gdp(countries, "Import");
            case 9 -> Plot_Chart.compare_line_gdp(countries, "Tax");
            default -> {
            }
        }
    }

    private static void Country_Plot(ArrayList<country> countries) {
        print_Menu1();
        int input=take_input();
        while(input>9 || input<0){
            out.println("Wrong Input!!!! Try Again");
            input=take_input();
        }
        switch (input) {
            case 1 -> Plot_Chart.plot_bar(countries, new GDP());
            case 2 -> Plot_Chart.plot_bar(countries, new Population());
            case 3 -> Plot_Chart.plot_bar(countries, new Reserves());
            case 4 -> Plot_Chart.plot_line(countries, new CPI());
            case 5 -> Plot_Chart.plot_line(countries, new Deposit_Interest_Rate());
            case 6 -> Plot_Chart.plot_line(countries, new Exchange_Rate());
            case 7 -> Plot_Chart.plot_lineGDP(countries, "Export");
            case 8 -> Plot_Chart.plot_lineGDP(countries, "Import");
            case 9 -> Plot_Chart.plot_lineGDP(countries, "Tax");
        }
    }

    private static int take_input() {
            out.print("Enter Your Choice:");
            if(sc.hasNextInt()){
                int d=sc.nextInt();
                sc.nextLine();
                return d;
            }
            else{
                sc.nextLine();
                out.println("Please Enter only Integer Values!!!!!!!!!!!!");
                return -100;
            }
    }
}
